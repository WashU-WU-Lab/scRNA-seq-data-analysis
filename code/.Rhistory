labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X7/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X8/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X9/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X10/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X11/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X14/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
barplot_data <- data.frame(X = result$group, Y = result$X17/result$Absolute.score..sig.score.)
significance2flag <- function(sig){
if(sig >= 0.05){
return("NS")
}else if(sig >= 0.01){
return("*")
}else if(sig >= 0.001){
return("**")
}else if(sig >= 0.0001){
return("***")
}else{
return("****")
}
}
temp_sign <- c()
temp_xmin <- c()
temp_xmax <- c()
temp_y <- c()
init <- 1.1
x_order <- c("Uninfected", "4dpi", "7dpi", "14dpi")
for(x in x_order){
if(x %in% x_order[2:4]){
temp_padj <- t.test(barplot_data$Y[barplot_data$X == "Uninfected"],
barplot_data$Y[barplot_data$X == x])$p.value
if(is.na(temp_padj)){
temp_padj = "NS"
}else{
temp_padj <- significance2flag(as.numeric(temp_padj))
}
temp_sign <- c(temp_sign, temp_padj)
temp_xmin <- c(temp_xmin, which(x_order == "Uninfected"))
temp_xmax <- c(temp_xmax, which(x_order == x))
temp_y <- c(temp_y, init)
init <- init + 0.1
}
}
ggplot(barplot_data, aes(x = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")), y = Y, fill = factor(X, levels = c("Uninfected", "4dpi", "7dpi", "14dpi")))) +
geom_bar(stat = "summary", fun = mean, width = 0.4, position = position_dodge(width = 0.9)) +
labs(x = "Infection Day", y = "Ratio of C3+ IECs", fill = "Infection Day") +
stat_summary(fun.data = "mean_sd", geom = "errorbar", colour = "black", width = 0.25, position = position_dodge( .9)) +
geom_jitter(size = 3, alpha = 0.8, shape = 20, width = 0.1) +
theme_minimal() +
ylim(0, max(barplot_data$Y) * init) +
theme(axis.text.x = element_text(size = 10), axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.title = element_text(size = 10), legend.text = element_text(size = 10))+
geom_signif(y_position = max(barplot_data$Y) * temp_y,
xmin = temp_xmin, xmax = temp_xmax, annotation = temp_sign, textsize = 5, vjust = 0.2, tip_length = 0)
totalCols == 0
shiny::runApp('C:/Users/Federico/Desktop/Test')
runApp('C:/Users/Federico/Desktop/Test/view')
rm(list=ls())
library(Seurat)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- readRDS("../data/sc_bt.rds")
data[["percent.mt"]] <- PercentageFeatureSet(data, pattern = "^mt-")
data$log10GenesPerUMI <- log10(data$nFeature_RNA) / log10(data$nCount_RNA) # Novelty score
# For BHT 6 & 7
sub_data_67 <- subset(data, subset = hash.ID %in% c("BHT6", "BHT7"))
## Filtering
### Cell-level filtering
VlnPlot(sub_data_67, features = c("nFeature_RNA", "nCount_RNA",
"percent.mt", "log10GenesPerUMI"), ncol = 4)
metadata <- sub_data_67@meta.data
metadata %>%
ggplot(aes(x=nFeature_RNA, olor=hash.ID, fill= hash.ID)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
ylab("Cell density") +
geom_vline(xintercept = 250)
metadata %>%
ggplot(aes(x=nCount_RNA, color=hash.ID, fill= hash.ID)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
ylab("Cell density") +
geom_vline(xintercept = 500)
metadata %>%
ggplot(aes(x=percent.mt, color=hash.ID, fill=hash.ID)) +
geom_density(alpha = 0.2) +
scale_x_log10() +
theme_classic() +
geom_vline(xintercept = 20)
metadata %>%
ggplot(aes(x=log10GenesPerUMI, color = hash.ID, fill = hash.ID)) +
geom_density(alpha = 0.2) +
theme_classic() +
geom_vline(xintercept = 0.75)
print(paste("Original cell num:", ncol(sub_data_67)))
sub_data_67 <- subset(sub_data_67, subset = nFeature_RNA >= 250 &
nCount_RNA >= 500 &
percent.mt <= 20 &
log10GenesPerUMI >= 0.75)
print(paste("Cell num after filtering:", ncol(sub_data_67)))
### Gene-level filtering
counts <- GetAssayData(object = sub_data_67, layer = "counts")
nonzero <- counts > 0
keep_genes <- Matrix::rowSums(nonzero) >= 10
print(paste("Original gene num:", nrow(sub_data_67)))
sub_data_67 <- CreateSeuratObject(counts[keep_genes, ],
meta.data = sub_data_67@meta.data)
print(paste("Cell num after filtering:", nrow(sub_data_67)))
## Preprocessing
sub_data_67 <- NormalizeData(sub_data_67, normalization.method = "LogNormalize",
scale.factor = 10000, layer = "counts")
sub_data_67 <- FindVariableFeatures(sub_data_67, selection.method = "vst",
nfeatures = 2000, layer = "counts")
sub_data_67 <- ScaleData(sub_data_67, features = VariableFeatures(sub_data_67))
sub_data_67 <- SCTransform(sub_data_67, vars.to.regress = "percent.mt")
BiocManager::install('glmGamPoi')
View(sub_data_67)
ElbowPlot(sub_data_67)
sub_data_67 <- RunPCA(sub_data_67, assay = "SCT", npcs = 50)
sub_data_67 <- RunPCA(sub_data_67, assay = "RNA", npcs = 50)
ElbowPlot(sub_data_67)
ElbowPlot(sub_data_67, dim = 1:50)
ElbowPlot(sub_data_67, dim = 50)
ElbowPlot(sub_data_67, ndims = 50)
sub_data_67 <- RunUMAP(sub_data_67, dims = 1:30, reduction = "pca")
DimPlot(sub_data_67)
Idents(sub_data_67) <- "hash.ID"
DimPlot(sub_data_67)
sub_data_67 <- RunPCA(sub_data_67, assay = "SCT", npcs = 50)
ElbowPlot(sub_data_67)
ElbowPlot(sub_data_67, ndims = 50)
sub_data_67 <- RunUMAP(sub_data_67, dims = 1:30, reduction = "pca")
Idents(sub_data_67) <- "hash.ID"
DimPlot(sub_data_67)
DefaultAssay(sub_data_67) <- "SCT"
View(sub_data_67)
sub_data_67 <- FindNeighbors(sub_data_67, reduction = "pca", dims = 1:30)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.5)
DimPlot(sub_data_67)
DefaultAssay(sub_data_67) <- "RNA"
FeaturePlot("Thy1")
FeaturePlot("Thy1", slot = "data")
FeaturePlot(sub_data_67, "Thy1", slot = "data")
FeaturePlot(sub_data_67, "Cd34", slot = "data")
FeaturePlot(sub_data_67, c("Thy1", "Cd34"), slot = "data")
FeaturePlot(sub_data_67, c("Thy1", "Cd34"), slot = "data", overlay = TRUE)
install.packages("Nebulosa")
BiocManager::install("Nebulosa")
plot_density(pbmc, "Thy1", reduction = "umap")
plot_density(sub_data_67, "Thy1", reduction = "umap")
library(Nebulosa)
plot_density(sub_data_67, "Thy1", reduction = "umap")
DefaultAssay(sub_data_67) <- "SCT"
plot_density(sub_data_67, "Thy1", reduction = "umap")
DefaultAssay(sub_data_67) <- "SCT"
FeaturePlot(sub_data_67, "Thy1", slot = "data")
FeaturePlot(sub_data_67, "Cd34", slot = "data")
FeaturePlot(sub_data_67, c("Thy1", "Cd34"), slot = "data", overlay = TRUE)
plot_density(sub_data_67, "Thy1", reduction = "umap")
plot_density(sub_data_67, "Cd34", reduction = "umap")
plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
p <- plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
p
plot_density(sub_data_67, c("Thy1", "Cd34"), reduction = "umap")
plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
DimPlot(sub_data_67)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.8)
DimPlot(sub_data_67)
DimPlot(sub_data_67, label = TRUE)
VlnPlot(sub_data_67, "Thy1", slot="data")
VlnPlot(sub_data_67, "Thy1", layer ="data")
VlnPlot(sub_data_67, "Cd34", layer ="data")
DefaultAssay(sub_data_67) <- "RNA"
plot_density(sub_data_67, "Thy1", reduction = "umap")
plot_density(sub_data_67, "Cd34", reduction = "umap")
VlnPlot(sub_data_67, "Cd34", layer ="data")
VlnPlot(sub_data_67, "Thy1", layer ="data")
FeaturePlot(sub_data_67, "Thy1", slot = "data")
FeaturePlot(sub_data_67, "Cd34", slot = "data")
saveRDS(sub_data_67, "sc_bt_Xinyang_20240624")
DefaultAssay(sub_data_67) <- "RNA"
markers <- FindAllMarkers(sub_data_67, only.pos = TRUE, min.pct = 0.25,
logfc.threshold = 0.25)
write.csv(markers, "../processed/sc_bt_BHT6&7_Xinyang_20240624.csv")
plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
p = plot_density(sub_data_67, c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
ggsave(p, "test.png")
ggsave("test.png", p)
plot_density(sub_data_67, features = c("Thy1", "Cd34"), joint = TRUE, reduction = "umap")
plot_density(sub_data_67, features = c("Thy1", "Cd34"), joint = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.4)
DefaultAssay(sub_data_67) <- "SCT"
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.4)
DimPlot(sub_data_67, label = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.1)
DimPlot(sub_data_67, label = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.2)
DimPlot(sub_data_67, label = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.3)
DimPlot(sub_data_67, label = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.4)
DimPlot(sub_data_67, label = TRUE)
sub_data_67 <- FindClusters(sub_data_67, resolution = 0.3)
DimPlot(sub_data_67, label = TRUE)
DefaultAssay(sub_data_67) <- "RNA"
FeaturePlot(sub_data_67, "Thy1", slot = "data")
FeaturePlot(sub_data_67, "Cd34", slot = "data")
VlnPlot(sub_data_67, "Thy1", slot="data")
VlnPlot(sub_data_67, "Cd34", slot="data")
plot_density(sub_data_67, "Thy1", reduction = "umap")
plot_density(sub_data_67, "Cd34", reduction = "umap")
DimPlot(sub_data_67, label = TRUE)
remove.packages("Nebulosa")
library("devtools")
devtools::install_github("powellgenomicslab/Nebulosa")
saveRDS(sub_data_67, "../processed/sc_bt_BHT6&7_Xinyang_20240624.Rds")
